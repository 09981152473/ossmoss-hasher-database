package nastasia.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import nastasia.connectionholder.ConnectionHolder;
import nastasia.mainclass.MainClass;
import nastasia.mainclass.Properties;

import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;

public class PasswordEnter extends JFrame {
    private JPanel mainPanel;
    private JTextField urlField;
    private JTextField nameField;
    private JButton connectButton;
    private JTextArea logArea;
    private JPasswordField passwordField;


    public PasswordEnter() {
        super("Database URL, user and pass input");
        setContentPane(mainPanel);
//        frame.setSize(300, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Properties prop = Properties.extract();
        String url = prop.saved_db_url;
        String user = prop.saved_db_user;
        urlField.setText(url);
        nameField.setText(user);
        pack();
        setVisible(true);
        connectButton.addActionListener(actionEvent -> {
            tryConnect();
        });
    }

    private void tryConnect() {
        String url = urlField.getText();
        String user = nameField.getText();
        if (url.equals("") || user.equals("")) {
            logArea.setText("Please, fill fields \"URL\" and \"User\" ");
            return;
        }
        String pass = new String(passwordField.getPassword());
        ConnectionHolder connectionHolder;
        try {
            connectionHolder = new ConnectionHolder(url, user, pass);
//            connection = DriverManager.getConnection(
//                    "jdbc:postgresql://127.0.0.1:5432/testdb", "mkyong",
//                    "123456");

        } catch (SQLException e) {
            System.out.println("Connection Failed! Maybe you should to start the service. Try \"sudo systemctl start postgresql-9.5\" bash command.");
            logArea.setText("ERROR: Connection Failed! Maybe you should to start the service. Try \"sudo systemctl start postgresql-9.5\" bash command or enter another data.\n\n" +
                    e.getMessage());
            e.printStackTrace();
            return;
        }

        MainClass.innerMain(connectionHolder);
        Properties properties = new Properties(url, user);
        properties.save();
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setPreferredSize(new Dimension(500, 300));
        connectButton = new JButton();
        connectButton.setText("Connect");
        mainPanel.add(connectButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        urlField = new JTextField();
        urlField.setColumns(100);
        urlField.setText("");
        panel1.add(urlField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nameField = new JTextField();
        panel1.add(nameField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordField = new JPasswordField();
        panel1.add(passwordField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("URL");
        panel1.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("User");
        panel1.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Password");
        panel1.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logArea = new JTextArea();
        logArea.setColumns(100);
        logArea.setEditable(false);
        logArea.setRows(10);
        logArea.setText("");
        scrollPane1.setViewportView(logArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
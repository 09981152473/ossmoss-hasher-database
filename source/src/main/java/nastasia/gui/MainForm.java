package nastasia.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import nastasia.connectionholder.ConnectionHolder;
import nastasia.datatypes.MatchInfo;
import pro.skor.ossmoss.Hasher;
import pro.skor.ossmoss.SourceCode;
import nastasia.tables.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;


public class MainForm {

    private JPanel panel1;
    private JPanel panel2;
    private JPanel panel3;
    private JPanel panel4;
    private JTabbedPane tabbedPane1;
    private JTextArea DBMainInfo;
    private JButton updateInfoButton;
    private JTextField sourceDirectory;
    private JButton addFilesButton;
    private JFormattedTextField TaskNumber;
    private JFormattedTextField taskVersion;
    private JTextArea addLog;
    private JList<MatchInfo> matchesList;
    private JComboBox<OrderBy> orderByComboBox;
    private JLabel matchRateLabel;
    private JTextField taskNumber2;
    private JTextField taskVersion2;

    private ConnectionHolder connectionHolder;
    private OrderBy sortOrder;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        panel1.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(600, 600), null, 0, false));
        panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Add files", panel2);
        final JLabel label1 = new JLabel();
        label1.setText("Source directory");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sourceDirectory = new JTextField();
        sourceDirectory.setText("");
        panel2.add(sourceDirectory, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addFilesButton = new JButton();
        addFilesButton.setText("Add files");
        panel2.add(addFilesButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Task number");
        panel2.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TaskNumber = new JFormattedTextField();
        panel2.add(TaskNumber, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Task version");
        panel2.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        taskVersion = new JFormattedTextField();
        taskVersion.setText("");
        panel2.add(taskVersion, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        addLog = new JTextArea();
        addLog.setEditable(false);
        addLog.setText("");
        scrollPane1.setViewportView(addLog);
        panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Database main info", panel4);
        panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("File matches");
        panel3.add(label4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        matchRateLabel = new JLabel();
        matchRateLabel.setText("Label");
        panel3.add(matchRateLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Sort By");
        panel3.add(label5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        orderByComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        orderByComboBox.setModel(defaultComboBoxModel1);
        panel3.add(orderByComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel3.add(scrollPane2, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        matchesList = new JList();
        scrollPane2.setViewportView(matchesList);
        final JLabel label6 = new JLabel();
        label6.setText("Main info");
        panel3.add(label6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        DBMainInfo = new JTextArea();
        DBMainInfo.setEditable(false);
        DBMainInfo.setRows(5);
        DBMainInfo.setText("");
        panel5.add(DBMainInfo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        updateInfoButton = new JButton();
        updateInfoButton.setText("Update");
        panel5.add(updateInfoButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel6, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Task number");
        panel6.add(label7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        taskNumber2 = new JTextField();
        taskNumber2.setText("All");
        panel6.add(taskNumber2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel6.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Task version");
        panel6.add(label8, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        taskVersion2 = new JTextField();
        taskVersion2.setText("All");
        panel6.add(taskVersion2, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    enum OrderBy {
        MATCH_RATING,
        TEST_FILE_AUTHOR, TEST_FILE_SEND_TIME,
        BASE_FILE_AUTHOR, BASE_FILE_SEND_TIME;

        @Override
        public String toString() {
            switch (this) {
                case MATCH_RATING:
                    return "Match rating";
                case BASE_FILE_AUTHOR:
                    return "Base file author";
                case TEST_FILE_AUTHOR:
                    return "Test file author";
                case BASE_FILE_SEND_TIME:
                    return "Base file send time";
                case TEST_FILE_SEND_TIME:
                    return "Test file send time";
                default:
                    return "Unknown choice";
            }
        }
    }

//    String [] orderBy = {
//            "Match rating",
//            "Test file author",    "Base file author",
//            "Test file send time", "Base file send time"
//    };


    // ****************************************************


    public MainForm(ConnectionHolder holder) {
        this.connectionHolder = holder;
        sortOrder = OrderBy.MATCH_RATING;
        $$$setupUI$$$();
        downloadMainInfo();
        loadMatchingPairs(sortOrder);
        matchRateLabel.setText(MatchInfo.defalut().toString());
        for (OrderBy item : OrderBy.values()) {
            orderByComboBox.insertItemAt(item, item.ordinal());
        }
        orderByComboBox.setSelectedItem(sortOrder);

        addFilesButton.addActionListener(actionEvent -> {
            addLog.setText("");
            downloadFiles();
            downloadMainInfo();
            loadMatchingPairs(sortOrder);
        });
        updateInfoButton.addActionListener((actionEvent) -> {
            downloadMainInfo();
            loadMatchingPairs(sortOrder);
        });
        matchesList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                if (mouseEvent.getButton() == MouseEvent.BUTTON1
                        && mouseEvent.getClickCount() == 2) {
                    MatchInfo data = matchesList.getSelectedValue();
                    MatcherForm matchVisualizer = new MatcherForm(data, connectionHolder);
                    matchVisualizer.setVisible(true);
                }
            }
        });
        orderByComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                Object selectedItem = orderByComboBox.getSelectedItem();
                if (selectedItem instanceof OrderBy) {
                    sortOrder = (OrderBy) selectedItem;
                }
            }
        });
    }

    public JPanel getPanel1() {
        return panel1;
    }


    // ********************** Listeners **********************

    private int getTaskId2() {
        String task_number_raw = taskNumber2.getText();
        int task_number;
        try {
            task_number = Integer.parseInt(task_number_raw);
        } catch (NumberFormatException ex) {
            taskNumber2.setText("All");
            return -1;
        }

        String task_version_raw = taskVersion2.getText();
        int task_version;
        try {
            task_version = Integer.parseInt(task_version_raw);
        } catch (NumberFormatException ex) {
            taskVersion2.setText("All");
            return -1;
        }

        int task_id = ProblemVersion.findId(task_number, task_version, connectionHolder);
        if (task_id < 0) {
            taskNumber2.setText("All");
            taskVersion2.setText("All");
            DBMainInfo.setText(connectionHolder.getMessage() +
                    "\r\nAll matches shown.");
        }
        return task_id;
    }

    private void loadMatchingPairs(OrderBy orderBy) {
        String orderCondition;
        switch (orderBy) {
            case MATCH_RATING:
                orderCondition = " ORDER BY match_rating DESC";
                break;
            case TEST_FILE_AUTHOR:
                orderCondition = " ORDER BY \"f1.login\"";
                break;
            case BASE_FILE_AUTHOR:
                orderCondition = " ORDER BY \"f2.login\"";
                break;
            case TEST_FILE_SEND_TIME:
                orderCondition = " ORDER BY \"f1.send_time\"";
                break;
            case BASE_FILE_SEND_TIME:
                orderCondition = " ORDER BY \"f2.send_time\"";
                break;
            default:
                orderCondition = " match_rating DESC";
                break;
        }

        int task_id = getTaskId2();
        String taskFilter =
                (task_id < 0)
                        ? ""
                        : " AND task_fk = " + task_id + " ";

        String query = "SELECT * FROM FilesComparisonStudentName WHERE match_rating > 0 "
                + taskFilter + " "
                + orderCondition + ";";
        Statement statement = connectionHolder.getEmptyStatement();
        try {
            ResultSet resultSet = statement.executeQuery(query);
            Vector<MatchInfo> pairsList = new Vector<>();

            while (resultSet.next()) {
                int id1 = resultSet.getInt("f1.file_id");
                int id2 = resultSet.getInt("f2.file_id");
                String login1 = resultSet.getString("f1.login");
                String login2 = resultSet.getString("f2.login");
                String sendTime1 = resultSet.getString("f1.send_time");
                String sendTime2 = resultSet.getString("f2.send_time");
                String match = resultSet.getString(FilesComparison.MATCH_RATING);
                MatchInfo matchInfo = new MatchInfo(id1, id2, login1, login2, sendTime1, sendTime2, match);
                pairsList.add(matchInfo);
            }
            resultSet.close();
            matchesList.setListData(pairsList);
        } catch (SQLException ex) {
            ex.printStackTrace();
            Vector<MatchInfo> message = new Vector<>();
            message.add(MatchInfo.errorMessage("Couldn't download matching results."));
            matchesList.setListData(message);
        }
    }

    private void downloadFiles() {
        String src_line = sourceDirectory.getText();
        String tn = TaskNumber.getText();
        String tv = taskVersion.getText();

        if (src_line.isEmpty()) {
            addLog.setText("Please, fill \"Source directory\" field.\n");
            return;
        }
        if (tn.isEmpty()) {
            addLog.setText("Please, fill \"Task number\" field.\n");
            return;
        }
        if (tv.isEmpty()) {
            addLog.setText("Please, fill \"Task version\" field.\n");
            return;
        }
        int task_num, task_ver;
        try {
            task_num = Integer.parseInt(tn);
            task_ver = Integer.parseInt(tv);
        } catch (Exception ex) {
            addLog.setText("Please, fill \"Task number\" and \"Task number\" fields correctly.\n");
            return;
        }

        int task_id = ProblemVersion.findId(task_num, task_ver, connectionHolder);

        if (task_id < 0) {
            addLog.setText("Sorry, could not find such task in database.\n");
            return;
        }
        // PARSING
        long startTime = System.currentTimeMillis();
        ArrayList<SourceCode> sources = Hasher.readSource(new String[]{"-I", src_line});
//        Collections.sort(sources, new Comparator<SourceCode>() {
//            @Override
//            public int compare(SourceCode t, SourceCode t1) {
//                return t.stamp().getTime().compareTo(t1.stamp().getTime());
//            }
//        });

        long parse_end_time = System.currentTimeMillis();

        StringBuilder log = new StringBuilder();
//        log.append("Parsing: ").append(sources.size()).append(" files parsed, ")
//        .append((double) (parse_end_time - startTime) * 0.001).append(" sec elapsed.\r\n\r\n");
//        addLog.setText(log.toString());

        String file_id;
        int counter = 0;
        connectionHolder.reset();

        // ADDING
        for (SourceCode file : sources) {
            file_id = SourceFile.addFileToDB(file, task_id, connectionHolder);
            if (file_id != null) {
                ++counter;
//                log.append(file.stamp().getName())
//                        .append(" added with id = ").append(file_id).append("\n");
            }
        }
        long add_end_time = System.currentTimeMillis();
//        log.append("Inserting file to database: ").append(counter).append(" files inserted, ")
//                .append((double) (add_end_time - parse_end_time) * 0.001).append(" sec elapsed.\r\n\r\n");
//        addLog.setText(log.toString());

        // MATCHING
        int pairs_num = -1;
        try {
            pairs_num = FilesComparison.findAllUncheckedMatches(task_id, connectionHolder);
        } catch (SQLException ex) {
            addLog.setText(connectionHolder.getMessage() + ex.getMessage() + "\r\n" + ex.getStackTrace());
            return;
        }
        long current_time = System.currentTimeMillis();
        long time_elapse = (current_time - startTime) / (long) 1000.0;

//        log.append("Matching files: ").append((pairs_num >= 0) ? pairs_num : "error: no").append(" matches found,")
//                .append((double) (current_time - add_end_time) * 0.001).append(" sec elapsed.\r\n\r\n");
//        addLog.setText(log.toString());

        log.append("Files parsed: ").append(sources.size()).append(".\r\n")
                .append("Files added: ").append(counter).append(".\r\n")
                .append("Matching files: ").append((pairs_num >= 0) ? pairs_num : "error: no")
                .append(" matches with new files found.\r\n")
                .append("Time elapsed: ").append(time_elapse).append("sec.\r\n")
                .append("   (Time for parse: ").append((double) (parse_end_time - startTime) * 0.001)
                .append(" sec.\r\n   Time for add files: ").append((double) (add_end_time - parse_end_time) * 0.001)
                .append(" sec.\r\n   Time for match rating: ").append((double) (current_time - add_end_time) * 0.001)
                .append(" sec.)\r\n");

        addLog.setText(log.toString());
    }

    private void downloadMainInfo() {
        String query1 = "SELECT COUNT(*) AS cnt FROM " + SourceFile.TABLENAME + ";";
        String query2 = "SELECT COUNT(DISTINCT + " + Lexem.DIGEST + " ) AS cnt FROM " + Lexem.TABLENAME + ";";
        String query3 = "SELECT COUNT(*) AS cnt FROM " + Student.TABLENAME;
        String query4 = "SELECT COUNT(*) AS cnt FROM " + FilesComparison.TABLENAME +
                " WHERE " + FilesComparison.MATCH_RATING + " > 0;";
        StringBuilder info = new StringBuilder();
        String files_counter = "", digests_counter = "", student_counter = "", matches_counter = "";

        try {
            Statement stmt = connectionHolder.getEmptyStatement();
            ResultSet resultSet = stmt.executeQuery(query1);
            if (resultSet.next()) {
                files_counter = resultSet.getString("cnt");
                resultSet.close();
            }
            resultSet = stmt.executeQuery(query2);
            if (resultSet.next()) {
                digests_counter = resultSet.getString("cnt");
                resultSet.close();
            }
            resultSet = stmt.executeQuery(query3);
            if (resultSet.next()) {
                student_counter = resultSet.getString("cnt");
                resultSet.close();
            }
            resultSet = stmt.executeQuery(query4);
            if (resultSet.next()) {
                matches_counter = resultSet.getString("cnt");
                resultSet.close();
            }
            info.append("Students:         ").append(student_counter).append("\r\n")
                    .append("Source files:     ").append(files_counter).append("\r\n")
                    .append("Distinct digests: ").append(digests_counter).append("\r\n")
                    .append("Matched pairs:    ").append(matches_counter).append("\r\n");
            DBMainInfo.setText(info.toString());
        } catch (SQLException ex) {
            ex.printStackTrace();
            DBMainInfo.setText("No data was loaded.\r\n" + ex.getStackTrace().toString());
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
//        orderByComboBox = new JComboBox<>(OrderBy.values());
//        orderByComboBox.setSelectedItem(OrderBy.MATCH_RATING);
//        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
//        orderByComboBox.setModel(defaultComboBoxModel1);
//        panel3.add(orderByComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

    }


    // ************************************************************************

}